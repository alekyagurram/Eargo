public class OrderProductUnitPrice 
{
    
    //Calculations to calculate Unit Price of OrderItem.    
    public static void calculateUnitPrice(List<OrderItem> oit, Order o){
        // if (o.CreatedDate >= Date.valueOf(Label.ORDER_PRODUCT_UNIT_DISCOUNT_CONSTRAINT) || Test.isRunningTest()) {
        if (Test.isRunningTest()) {
            Decimal total= 0.0;
            for (OrderItem oi1: oit)
            {
                total = total + oi1.ListPrice*oi1.Quantity;
            }
            if(total == null)
                total = 0.00;
            
            List<OrderItem> updateList = new List<OrderItem>();
                
            Decimal Agent_Promo_Total = 0.0;
            if(o.Agent_Promo_Total__c != NULL)
            {
                Agent_Promo_Total = o.Agent_Promo_Total__c  ;
            }
            for (OrderItem oi2: oit) 
            {	
                if(total > 0.00)
                    oi2.Discount__c = Agent_Promo_Total * ( oi2.ListPrice/total );
                else 
                    oi2.Discount__c = 0.00;
                
                oi2.UnitPrice = oi2.ListPrice - oi2.Discount__c;
                updateList.add(oi2); 
            }
            update updateList;     
        }
    }
    
    //After Insert && After Update from trigger on OrderItems
    public static void updateOrderProductUnitPrice(OrderItem oi )
    {
        List<Order> o = [select Id, Agent_Promo_Total__c, OrderReferenceNumber,CreatedDate from Order where id =: oi.OrderId];
        String orderReferenceNumber = (o[0].OrderReferenceNumber == NULL )?'UNKNOWN':o[0].OrderReferenceNumber;
        if( orderReferenceNumber.Startswith('SA') || orderReferenceNumber.Startswith('RE')) {
            List<OrderItem> oit = [select Id, ListPrice , Quantity from OrderItem where OrderId =: oi.OrderId];
           
            if(oit.size() > 0) 
            	OrderProductUnitPrice.calculateUnitPrice(oit,o[0]);
        }
        
     }
    
    public static void updateOrderProductUnitPrice(OrderItem oi , OrderItem oldoi )
    { 
         List<Order> o = [select Id, Agent_Promo_Total__c , OrderReferenceNumber,CreatedDate from Order where id =: oi.OrderId];
         String orderReferenceNumber = (o[0].OrderReferenceNumber == NULL )?'UNKNOWN':o[0].OrderReferenceNumber;
         if( orderReferenceNumber.Startswith('SA') || orderReferenceNumber.Startswith('RE')) {
                if(oi.Quantity != oldoi.Quantity) {
               	
                    List<OrderItem> oit = [select Id, ListPrice , Quantity from OrderItem where OrderId =: oi.OrderId];
                    if(oit.size() > 0) 
                    	OrderProductUnitPrice.calculateUnitPrice(oit,o[0]);
                }
            }
         
    }

    // After Insert && After Update from trigger on Order. 
    public static void updateOrderProductUnitPrice(Order newOrder, Order oldOrder)
    {   
        Boolean recalculate = False;
        String orderReferenceNumber = (newOrder.OrderReferenceNumber == NULL )?'UNKNOWN':newOrder.OrderReferenceNumber;
        if(orderReferenceNumber.Startswith('SA') || orderReferenceNumber.Startswith('RE')) 
        {           
              if(oldOrder.Agent_Promo_Total__c != NULL && newOrder.Agent_Promo_Total__c == NULL)
                  recalculate = True;
              else if(oldOrder.Agent_Promo_Total__c == Null && newOrder.Agent_Promo_Total__c != NULL)
                  recalculate = True;
              else if (oldOrder.Agent_Promo_Total__c != newOrder.Agent_Promo_Total__c )
                  recalculate = True;
          }

        if(recalculate) 
        {
            List<OrderItem> oit = [select Id, ListPrice ,Quantity  from OrderItem where OrderId =: newOrder.Id];
            
			if(oit.size() > 0) 
            	OrderProductUnitPrice.calculateUnitPrice(oit,newOrder);
            
        }
    }
 
}
